@{
    Layout = "_Layout";
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<link rel="stylesheet" href="~/css/GlucoInsight.css" />

<!-- 主要內容 -->
<section id="app" class="main-content col-10 d-flex flex-column">
    <!-- A.血糖預測功能頁 -->
    <div v-if="step===1">
        <header class="content-header">
            <h2 class="section-title">血糖預測功能</h2>
        </header>
        <!-- 免責提示區塊 -->
        <section v-if="!warningIsHidden" id="infoBanner" class="info-banner alert">
            <img src="~/images/Big_Info_Icon.svg" alt="Information icon" class="info-icon flex-shrink-0 me-4" />
            <p class="info-message flex-grow-1">
                本預測結果僅供參考，基於您過去記錄資料與模型推估所得，實際血糖變化可能因身體狀況、藥物影響等因素而異，如需行為建議，請諮詢專業醫療人員。
            </p>
            <button type="button" aria-label="Close"
                    class="btn-close me-3 mt-2 position-absolute top-0 end-0" @@click ="toggleHidden"></button>
        </section>
        <!-- end -->

        <main class="prediction-container container py-2">
            <!-- 預測時刻 -->
            <section class="prediction-time-section mb-2">
                <h4 for="predictTime" class="prediction-time-label mb-3">預測時刻</h4>
                <input id="predictTime" type="datetime-local" class="time-display-container p-3 form-control " v-model="predictTime" />
            </section>

            <small class="time-description mb-4">預設為現在，或自訂未來/歷史時點</small>

            <!-- 當下血糖 -->
            <div class="blood-sugar-label-container d-flex align-items-center mb-2 mt-5">
                <label class="blood-sugar-label mb-0 mb-2" for="currentBg blood-sugar-input">當下血糖 (mg/dL)</label>               
            </div>
            <input id="currentBg" type="number" class="blood-sugar-input form-control mb-5 p-3" v-model.number="currentBg" placeholder="請輸入當前血糖值" />
            
        </main>

        <!-- CTA 按鈕，進行下一步 -->
        <button type="button" class="start-prediction-button btn btn-primary btn-lg align-self-start "
                v-on:click="goToStep2" :disabled="!currentBg">
            開始進行預測
        </button>
        <!-- end -->
    </div>


    <!-- Step 2：輸入飲食資料 -->
    <div v-if="step===2">
        <h3>步驟 2：輸入飲食資料</h3>
        <div class="row mb-3">
            <div class="col-md-6">
                <label class="form-label">食物類型</label>
                <select class="form-select" v-model="selectedCategoryId">
                    <option value="">── 全部類型 ──</option>
                    <option v-for="c in categories" :key="c.food_category_id" :value="c.food_category_id">
                        {{ c.food_type }}
                    </option>
                </select>
            </div>
            <div class="col-md-6">
                <label class="form-label">選擇食物</label>
                <select class="form-select" v-model="selectedFoodId">
                    <option disabled value="">── 選擇食物 ──</option>
                    <option v-for="f in filteredFoods" :key="f.food_id" :value="f.food_id">
                        {{ f.food_name }} (GI {{ f.glycemic_index }})
                    </option>
                </select>
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-4">
                <label class="form-label">份量</label>
                <input type="number" class="form-control" v-model.number="selectedFoodPortion" min="1" />
            </div>
            <div class="col-md-8 d-flex align-items-end">
                <button class="btn btn-primary w-100" v-on:click="addFood">新增食物</button>
            </div>
        </div>
        <ul class="list-group mb-3">
            <li class="list-group-item" v-for="(fi, i) in foodInputs" :key="i">
                {{ fi.name }}：{{ fi.portion }} 份
                <span class="float-end">
                    <button class="btn btn-sm btn-outline-secondary me-1" v-on:click="changePortion(foodInputs, i, -1, 'portion')">-</button>
                    <button class="btn btn-sm btn-outline-secondary me-1" v-on:click="changePortion(foodInputs, i, +1, 'portion')">+</button>
                    <button class="btn btn-sm btn-danger" v-on:click="removeItem(foodInputs, i)">刪除</button>
                </span>
            </li>
        </ul>
        <button class="btn btn-secondary me-2" v-on:click="step=1">上一步：模擬起點</button>
        <button class="btn btn-success" v-on:click="goToStep3" :disabled="!foodInputs.length">下一步：輸入運動</button>
    </div>

    <!-- Step 3：輸入運動資料，選擇時段：餐前／餐後 -->
    <div v-if="step===3">
        <h3>步驟 3：輸入運動資料</h3>
        <div class="row mb-3">
            <div class="col-md-6">
                <label class="form-label">選擇運動</label>
                <select class="form-select" v-model="selectedExId">
                    <option disabled value="">── 選擇運動 ──</option>
                    <option v-for="e in exercises" :key="e.exercise_id" :value="e.exercise_id">
                        {{ e.exercise_name }}
                    </option>
                </select>
            </div>
            <div class="col-md-6">
                <label class="form-label">運動時段</label>
                <select class="form-select" v-model="selectedExPeriod">
                    <option disabled value="">── 餐前／餐後 ──</option>
                    <option value="BeforeMeal">餐前運動</option>
                    <option value="AfterMeal">餐後運動</option>
                </select>
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-4">
                <label class="form-label">運動時長 (分鐘)</label>
                <input type="number" class="form-control" v-model.number="selectedExDuration" min="1" />
            </div>
            <div class="col-md-8 d-flex align-items-end">
                <button class="btn btn-primary w-100" v-on:click="addExercise">新增運動</button>
            </div>
        </div>
        <ul class="list-group mb-3">
            <li class="list-group-item" v-for="(ei, i) in exerciseInputs" :key="i">
                {{ ei.name }}：{{ ei.durationMin }} 分 &nbsp;
                <small class="text-muted">({{ ei.period === 'BeforeMeal' ? '餐前' : '餐後' }})</small>
                <span class="float-end">
                    <button class="btn btn-sm btn-outline-secondary me-1" v-on:click="changePortion(exerciseInputs, i, -5, 'durationMin')">-5</button>
                    <button class="btn btn-sm btn-outline-secondary me-1" v-on:click="changePortion(exerciseInputs, i, +5, 'durationMin')">+5</button>
                    <button class="btn btn-sm btn-danger" v-on:click="removeItem(exerciseInputs, i)">刪除</button>
                </span>
            </li>
        </ul>
        <button class="btn btn-secondary me-2" v-on:click="step=2">上一步：輸入飲食</button>
        <button class="btn btn-success" v-on:click="goToStep4" :disabled="!exerciseInputs.length">下一步：預測結果</button>
    </div>

    <!-- Step 4：顯示結果 -->
    <div v-if="step===4">
        <h3>步驟 4：2 小時血糖趨勢預測</h3>
        <canvas id="trendChart" height="200"></canvas>
        <div class="mt-3">
            <button class="btn btn-secondary me-2" v-on:click="step=3">上一步：輸入運動</button>
            <button class="btn btn-success" v-on:click ="predict">重新預測</button>
        </div>
    </div>
</div>
</section>
<!-- end -->

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    const { createApp } = Vue;
    createApp({
      data() {
        return {
          warningIsHidden: false,
          step: 1,
          predictTime: new Date().toISOString().slice(0,16),
          currentBg: null,
          categories: [], foods: [], exercises: [],
          selectedCategoryId: '',
          selectedFoodId: '', selectedFoodPortion: 1,
          selectedExId: '', selectedExPeriod: '', selectedExDuration: 30,
          foodInputs: [], exerciseInputs: [],
          chart: null, predictedBgs: []
        };
      },
      computed: {
        filteredFoods() {
          return this.selectedCategoryId
            ? this.foods.filter(f => f.food_category_id === this.selectedCategoryId)
            : this.foods;
        }
      },
      async mounted() {
        const [catRes, foodRes, exRes] = await Promise.all([
          axios.get('/api/v1/history/foodcategories'),
          axios.get('/api/v1/history/foods'),
          axios.get('/api/v1/history/exercises')
        ]);
        this.categories = catRes.data;
        this.foods = foodRes.data;
        this.exercises = exRes.data;
      },
      methods: {
        toggleHidden() {this.warningIsHidden = true;},
        goToStep2() { this.step = 2; },
        goToStep3() { this.step = 3; },
        goToStep4() { this.step = 4; this.$nextTick(this.predict); },
        addFood() {
          if (!this.selectedFoodId) return;
          const f = this.foods.find(x => x.food_id === this.selectedFoodId);
          this.foodInputs.push({
            foodId: f.food_id, name: f.food_name, portion: this.selectedFoodPortion
          });
          this.selectedFoodPortion = 1;
        },
        addExercise() {
          if (!this.selectedExId || !this.selectedExPeriod) return;
          const e = this.exercises.find(x => x.exercise_id === this.selectedExId);
          this.exerciseInputs.push({
            exerciseId: e.exercise_id, name: e.exercise_name,
            durationMin: this.selectedExDuration, period: this.selectedExPeriod
          });
          this.selectedExDuration = 30;
        },
        removeItem(arr, i) { arr.splice(i, 1); },
        changePortion(arr, i, delta, key = 'portion') { const v = arr[i][key] + delta; if (v > 0) arr[i][key] = v; },
        async predict() {
          const req = {
            userId: 1,
            time: new Date(this.predictTime + ':00+08:00').toISOString(),
            currentBg: this.currentBg,
            foodInputs: this.foodInputs.map(x => ({ FoodId: x.foodId, Portion: x.portion })),
            exerciseInputs: this.exerciseInputs.map(x => ({ ExerciseId: x.exerciseId, DurationMin: x.durationMin, Period: x.period }))
          };
          const res = await axios.post('/api/v1/prediction/custom/multi', req);
          this.predictedBgs = res.data.predictedBgs;
          const labels = this.predictedBgs.map((_, i) => `${15 * (i+1)} 分`);
          if (this.chart) this.chart.destroy();
          this.chart = new Chart(document.getElementById('trendChart'), {
            type: 'line',
            data: { labels, datasets: [{ label: '預測血糖', data: this.predictedBgs, tension: 0.3, borderWidth: 2 }] }
          });
        }
      }
    }).mount('#app');
</script>
